// C program to implement  Binary Search 
/*iterative binary search*/
#include <stdio.h> 
  
int binarySearch(int A[], int l, int r, int num) 
{ 
    while (l <= r)
 { 
       
    int mid = l + (r - l) / 2; 
  
                                             // Check if x is present at mid
        if (A[mid] == num) 
        return mid; 
  
                                            // If x greater than mid
        if (A[mid] < num) 
        l = mid + 1; 
  
                                           // If x is smaller than mid  
        else
        r = mid - 1; 
    } 
  
                                          // num not found 
    return -1; 
 } 
  
    int main(void) 
    { 
    int A[] = { 1, 3, 5, 17, 50 }; 
    int n = sizeof(A) / sizeof(A[0]); 
    int num = 17; 
    int result = binarySearch(A, 0, n - 1, num); 
    (result == -1) ? printf("Element not found"); 
                   : printf("Element is present at index %d",  result); 
    return 0; 
} 







  
//  recursive binary search function
/*recursive*/

  #include <stdio.h> 
  int binarySearch(int A[], int l, int r, int num) 
{ 
   if (r >= l) 
   { 
        int mid = l + (r - l)/2; 
  
                                                                    // If the number is present at the middle 
       if (A[mid] == num)  return mid; 
  
                                                                   // If element is smaller than mid 
        
        if (A[mid] > num)  return binarySearch(A, l, mid-1, num); 
  
       
        return binarySearch(A, mid+1, r, num); 
   } 
  
                                                                   // number is not present in array 
   return -1; 
} 
  
int main(void) 
{ 
   int arr[] = {1, 3, 5, 17, 47}; 
   int n = sizeof(A)/ sizeof(A[0]); 
   int num = 17; 
   int result = binarySearch(A, 0, n-1, num); 
   (result == -1)? printf("Element is not found") 
                 : printf("Element is present at index %d", result); 
   return 0; 
} 
